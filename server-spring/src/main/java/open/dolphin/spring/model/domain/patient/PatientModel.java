package open.dolphin.spring.model.domain.patient;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import javax.persistence.*;
import open.dolphin.spring.model.core.InfoModel;
import open.dolphin.spring.model.core.ModelUtils;
import open.dolphin.spring.model.dto.SimpleAddressModel;
import open.dolphin.spring.model.dto.AddressModel;
import open.dolphin.spring.model.dto.TelephoneModel;
import open.dolphin.spring.model.domain.patient.PatientLiteModel;
import open.dolphin.spring.model.domain.insurance.HealthInsuranceModel;
import open.dolphin.spring.model.domain.insurance.PVTHealthInsuranceModel;

/**
 * PatientModel
 *
 * @author Minagawa,kazushi
 *         -
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EqualsAndHashCode(callSuper = true)
@Entity
@Table(name = "d_patient")
public class PatientModel extends InfoModel {

    // PK
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long id;

    // 施設ID
    @Column(nullable = false)
    private String facilityId;

    // 施設内の患者ID
    @Column(nullable = false)
    private String patientId;

    // 姓
    private String familyName;

    // 名
    private String givenName;

    // 姓名
    @Column(nullable = false)
    private String fullName;

    // 姓カナ
    private String kanaFamilyName;

    // 名カナ
    private String kanaGivenName;

    // 姓名カナ
    private String kanaName;

    // ローマ字姓
    private String romanFamilyName;

    // ローマ字名
    private String romanGivenName;

    // ローマ字姓名
    private String romanName;

    // 性別コード値
    @Column(nullable = false)
    private String gender;

    // 性別表記
    private String genderDesc;

    // 性別コード体系
    @Transient
    private String genderCodeSys;

    // 生年月日 yyyy-MM-dd
    private String birthday;

    // 国籍コード値
    private String nationality;

    // 国籍表記
    @Transient
    private String nationalityDesc;

    // 国籍コード体系
    @Transient
    private String nationalityCodeSys;

    // 婚姻状況コード値
    private String maritalStatus;

    // 婚姻状況表記
    @Transient
    private String maritalStatusDesc;

    // 婚姻状況コード体系
    @Transient
    private String maritalStatusCodeSys;

    // JPEG形式写真データ
    @Lob
    private byte[] jpegPhoto;

    // メモ
    private String memo;

    // 連絡先住所
    @Embedded
    private SimpleAddressModel address;

    // 電話番号
    private String telephone;

    // 携帯番号
    private String mobilePhone;

    // 電子メールアドレス
    private String email;

    // 家族等
    private String relations;

    // 健康保険 DBへへ保存されているPVTHealthInsuranceModel
    @OneToMany(mappedBy = "patient", cascade = { CascadeType.PERSIST, CascadeType.REMOVE })
    private List<HealthInsuranceModel> healthInsurances;

    // 健康保険 クライント等が使用
    @Transient
    private List<PVTHealthInsuranceModel> pvtHealthInsurances;

    // 住所
    @Transient
    private Collection<AddressModel> addresses;

    // 電話番号
    @Transient
    private Collection<TelephoneModel> telephones;

    // masuda^
    // 受診日。患者検索で使用
    @Transient
    private String pvtDate;

    // s.oh^ 2014/08/19 施設患者一括表示機能
    private String appMemo;
    // s.oh$

    // s.oh^ 2014/08/29 患者情報の追加
    private String reserve1;
    private String reserve2;
    private String reserve3;
    private String reserve4;
    private String reserve5;
    private String reserve6;
    // s.oh$

    // masuda^ 排他処理関連
    private String ownerUUID; // 現在の所有者UUID

    // minagawa^ 新患検索用に初診日=(カルテ作成日）を追加 for ios7 対応
    // PC用コンバータでは不要
    @Transient
    private Date firstVisited;

    // Business logic methods that should not be generated by Lombok
    public String getPvtDateTrimTime() {
        return ModelUtils.trimTime(pvtDate);
    }

    public String getPvtDateTrimDate() {
        return ModelUtils.trimDate(pvtDate);
    }

    public boolean isOpened() {
        return ownerUUID != null;
    }

    public String getAgeBirthday() {
        return ModelUtils.getAgeBirthday(birthday);
    }

    public String getGenderDesc() {
        return genderDesc != null
                ? genderDesc
                : ModelUtils.getGenderDesc(gender);
    }

    public String contactZipCode() {
        return (address != null) ? address.getZipCode() : null;
    }

    public String contactAddress() {
        return (address != null) ? address.getAddress() : null;
    }

    public String getHomeAddress() {
        return (address != null) ? address.getAddress() : null;
    }

    public void addHealthInsurance(HealthInsuranceModel value) {
        if (healthInsurances == null) {
            healthInsurances = new ArrayList<HealthInsuranceModel>(2);
        }
        healthInsurances.add(value);
    }

    public void addPvtHealthInsurance(PVTHealthInsuranceModel model) {
        if (pvtHealthInsurances == null) {
            pvtHealthInsurances = new ArrayList<PVTHealthInsuranceModel>(2);
        }
        pvtHealthInsurances.add(model);
    }

    public void addAddress(AddressModel address) {
        if (addresses == null) {
            addresses = new ArrayList<AddressModel>(1);
        }
        addresses.add(address);
    }

    public void addTelephone(TelephoneModel telephone) {
        if (telephones == null) {
            telephones = new ArrayList<TelephoneModel>(1);
        }
        telephones.add(telephone);
    }

    public PatientLiteModel patientAsLiteModel() {
        PatientLiteModel model = new PatientLiteModel();
        model.setPatientId(getPatientId());
        model.setFullName(getFullName());
        model.setKanaName(getKanaName());
        model.setGender(getGender());
        model.setGenderDesc(getGenderDesc());
        model.setBirthday(getBirthday());
        return model;
    }

    // Compatibility methods
    public SimpleAddressModel getSimpleAddressModel() {
        return address;
    }

    public void setSimpleAddressModel(SimpleAddressModel address) {
        this.address = address;
    }
}
